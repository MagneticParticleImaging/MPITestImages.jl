var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MPITestImages","category":"page"},{"location":"#MPITestImages","page":"Home","title":"MPITestImages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MPITestImages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MPITestImages]","category":"page"},{"location":"#MPITestImages.TestImage","page":"Home","title":"MPITestImages.TestImage","text":"Struct describing a testimage.\n\nFields\n\nname::String: The name of the test image.\ndata::AbstractArray: The test image data itself. This can be 2D or 3D.\nargs::Tuple: The arguments necessary to generate the specified test image.\nkwargs::Any: The corresponding key word arguments to generate the specified test image.\n\n\n\n\n\n","category":"type"},{"location":"#MPITestImages.addOnTheFlyImage-Tuple{Symbol}","page":"Home","title":"MPITestImages.addOnTheFlyImage","text":"addOnTheFlyImage(fun)\n\n\nAdd a function symbol to the list of known test image generation functions.\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.changeScale-Tuple{String, String, Tuple{Integer, Integer}, Vararg{Any}}","page":"Home","title":"MPITestImages.changeScale","text":"Loads the specified image from remote source and scales it accordingly.\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.checker_image","page":"Home","title":"MPITestImages.checker_image","text":"checker_image()\nchecker_image(size)\nchecker_image(size, checkersCount)\nchecker_image(size, checkersCount, stripeWidth)\n\n\nFunction to generate a phantom with a checker board pattern. This function uses a best effort approach, meaning that it is tried to cover most of the phantom with the pattern using the specified parameters.\n\nArguments\n\nsize::Tuple{Integer, Integer}: The size of the phantom\ncheckersCount::Tuple{Integer, Integer}: How many squares to generate along each axis\nstripeWidth::Tuple{Integer, Integer}: By default (1, 1). Sets the width of the lines between the squares\n\nExamples\n\njulia> image = checker_image((8, 8), (2, 3), (2, 1))\n8×8 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  1.0  0.0  1.0  0.0  1.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"function"},{"location":"#MPITestImages.delta_image-Tuple{Tuple{Integer, Integer}, Integer}","page":"Home","title":"MPITestImages.delta_image","text":"delta_image(\n    size,\n    numOfPoints;\n    sizeOfPoint,\n    distanceOfPoints,\n    pivot,\n    circularShape\n)\n\n\nFunction to generate a phantom with discrete points. The distanceOfPoints argument takes two functions that take the number of the point to generate and return an integer. This makes the phantoms to generate highly customizable.\n\nArguments\n\nsize::Tuple{Integer, Integer}: The size of the phantom\nnumOfPoints::Integer: The number of points to generate\nsizeOfPoint::Tuple{Integer, Integer}: The size of the points in the phantom\ndistanceOfPoints::Tuple{Function, Function}: The distance to add between each points in x and y direction\npivot::Tuple{Integer, Integer}: The starting point to generate points towards (size, size)\ncircularShape::Bool: If true, points are generated as circular\n\nExamples\n\nTwo simple dots\n\njulia> image = delta_image((8, 8), 2; sizeOfPoint=(3, 2), distanceOfPoints=(x -> 0, x -> 4), pivot=(3, 3))\n8×8 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\nL-shaped arrangement\n\njulia> image = delta_image((8, 8), 3; sizeOfPoint=(2, 2), distanceOfPoints=(x -> x == 2 ? 3 : 0, x -> x == 3 ? -3 : 3), pivot=(3, 3))\n8×8 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  1.0  0.0  1.0  1.0  0.0\n 0.0  0.0  1.0  1.0  0.0  1.0  1.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.derenzo_image-Tuple{Int64, Vector{Int64}, Union{Int64, Vector{Int64}}}","page":"Home","title":"MPITestImages.derenzo_image","text":"derenzo_image(\n    diameter,\n    pointSizePerSextant,\n    gapBetweenSextants;\n    distanceBetweenPoints,\n    arrowShape\n)\n\n\nFunction to generate Derenzo Phantom. This is done by specifying the diameter of the phantom and the size in pixel and  for each sextant of the phantom. The algorithm tries to fill the radius with as many dots as possible.\n\nArguments\n\ndiameter::Int64: Diameter in pixel of the phantom.\npointSizePerSextant::Vector{Integer}: Size for the points in each sextant. Should atleast be of length 6.\ngapBetweenSextants::Union{Int64, Vector{Int64}}: Gap between the center of the phantom and the sextants.\n\nOptional Arguments\n\ndistanceBetweenPoints::Union{Int64, Vector{Int64}}=-1: The ctc distance of the holes.  arrowShape::Bool=false: If true the last row of each sextant will have another row of one less hole if it fits.\n\nReturns\n\nimage::Matrix{Float64}: The resulting Derenzo phantom.\n\nExamples\n\nThis call generates a phantom similar to QRMs Mini Derenzo Phantom:\n\nderenzo = derenzo_image(600, \n\tInt.(round.([0.6*500, 0.8*500, 1.0*500, 1.2*500, 1.5*500, 2.0*500]./29)), \n\t30,\n\tdistanceBetweenPoints=Int.(round.([1.2*500, 1.6*500, 2.0*500, 2.4*500, 3.0*500, 4.0*500]./29)),\n\tarrowShape=true)\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.jaszczak_phantom-Tuple{Vector{Int64}, Matrix{Float64}, Int64, Int64, Int64}","page":"Home","title":"MPITestImages.jaszczak_phantom","text":"jaszczak_phantom(\n    radiusSpheres,\n    derenzoImage,\n    height,\n    distanceSpheresToRods,\n    heightRods\n)\n\n\nFunction to generate the Jaszczak Phantom. It is necessary to generate a Derenzo phantom first as it is part of the 3D body to generate.\n\nArguments\n\nradiusSpheres::Vector{Int64}: Vector with length 6 giving the radius of each sphere of the phantom.\nderenzoImage::Matrix{Float64}: The Derenzo phantom which is part of the Jaszczak Phantom. \n\nThe dimensions of this image dictates the depth and width of the resulting phantom.\n\nheight::Int64: The height of the phantom.\ndistanceSpheresToRods::Int64: The distance between the spheres and the beginning of the rods.\nheightRods::Int64: The height of the rods (The Derenzo phantom part).\n\nReturns\n\nArray{Float64, 3}: The three dimensional phantom.\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.siemens_star","page":"Home","title":"MPITestImages.siemens_star","text":"https://en.wikipedia.org/wiki/Siemens_star\n\n\n\n\n\n","category":"function"},{"location":"#MPITestImages.spatial_resolution_phantom-Tuple{Tuple{Int64, Int64, Int64}, Int64, Int64, Vector{Int64}}","page":"Home","title":"MPITestImages.spatial_resolution_phantom","text":"spatial_resolution_phantom(\n    sizePhantom,\n    numHolesInRow,\n    numRows,\n    holeSizes\n)\n\n\nGenerates Spatial Resolution Phantom.\n\nAdapted from https://www.elsesolutions.com/wp-content/uploads/2016/02/Spatial-Resolution-Phantom.pdf\n\nArguments\n\nsize::Tuple{Integer, Integer, Integer}: The size of the 3D phantom.\nnumHolesInRow::Integer: How many holes should be placed in one row.\nnumRows::Integer: Number of rows in the phantom.\nholeSizes::Vector{Integer}: Sizes of holes at each row. This vector has to have an equal length to the number of rows present.\n\nReturns\n\nArray{Float64, 3}: The three dimensional phantom.\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.testimage-Tuple{String, Vararg{Any}}","page":"Home","title":"MPITestImages.testimage","text":"testimage(name, args; kwargs...)\n\n\nRetrieve a test image with the given name and the matching parameters.\n\nNote: The name must correspond either to a remote file or a function \t\t\tname annotated by the testimage_gen macro. If both exist, precedence \t\t\tis given to the function.\n\nExamples\n\njulia> image = testimage(\"delta_image\", (8, 8), 2; sizeOfPoint=(3, 2), distanceOfPoints=(x -> 0, x -> 4), pivot=(3, 3))\n8×8 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  1.0  1.0  0.0  0.0  1.0  1.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n\n\n\n\n\n","category":"method"},{"location":"#MPITestImages.@testimage_gen-Tuple{Expr}","page":"Home","title":"MPITestImages.@testimage_gen","text":"Macro for annotating functions that can be used to generate test images.\n\n\n\n\n\n","category":"macro"}]
}
